)
# Superimpose a density line
lines(density(iris$Sepal.Length), col = "red", lwd = 4)
# Step 4: Scatter Plots
# Sepal.Length vs Sepal.Width colored by Species
palette(c("blue", "red", "green")) # set palette for scatter, or it's default color
plot(iris$Sepal.Length, iris$Sepal.Width,
col = iris$Species,
pch = 18,
main = "Wei Lu",
xlab = "Sepal Length",
ylab = "Sepal Width"
)
# set legend
legend("topleft", legend = levels(iris$Species), col = 1:3, pch = 18, title = "Species")
# Step 5: Simple Math Calculations
# Sepal.Length
mean <- mean(iris$Sepal.Length)
cat("Mean:", mean, "\n")
median <- median(iris$Sepal.Length)
cat("Median:", median, "\n")
min <- min(iris$Sepal.Length)
cat("Min:", min, "\n")
max <- max(iris$Sepal.Length)
cat("Max:", max, "\n")
sd <- sd(iris$Sepal.Length)
cat("Standard Deviation:", sd, "\n")
# Calculate the Median for the numeric for each group member.
median_species <- aggregate(Sepal.Length ~ Species, data = iris, FUN = median)
# Week 1 - R Program - Wei Lu
# load Data Set, (not necessary since it is already loaded)
data(iris)
# Step 1: Describe the Data
# print the structure of the data (str)
str(iris)
# print summary of the data
summary(iris)
# print the first six records
head(iris)
# Step 2: Box-Whisker Plots
# Plot a box plot of Sepal.Length split by Species
boxplot(Sepal.Length ~ Species,
data = iris,
main = "Wei Lu",
col = c("blue", "red", "green"),
notch = TRUE,
xlab = "Species",
ylab = "Sepal Length"
)
# Step 3: Histograms
# Plot a histogram of Sepal.Length
hist(iris$Sepal.Length,
breaks = 18,
col = "green", # set background color
border = "#eb78e3", # set line color
main = "Wei Lu",
xlab = "Sepal Length",
probability = TRUE
)
# Superimpose a density line
lines(density(iris$Sepal.Length), col = "red", lwd = 4)
palette(c("blue", "red", "green")) # set palette for scatter, or it's default color
plot(iris$Sepal.Length, iris$Sepal.Width,
col = iris$Species,
pch = 18,
main = "Wei Lu",
xlab = "Sepal Length",
ylab = "Sepal Width"
)
# set legend
legend("topleft", legend = levels(iris$Species), col = 1:3, pch = 18, title = "Species")
# Step 5: Simple Math Calculations
# Sepal.Length
mean <- mean(iris$Sepal.Length)
cat("Mean:", mean, "\n")
median <- median(iris$Sepal.Length)
cat("Median:", median, "\n")
min <- min(iris$Sepal.Length)
cat("Min:", min, "\n")
max <- max(iris$Sepal.Length)
cat("Max:", max, "\n")
sd <- sd(iris$Sepal.Length)
cat("Standard Deviation:", sd, "\n")
# Calculate the Median for the numeric for each group member.
median_species <- aggregate(Sepal.Length ~ Species, data = iris, FUN = median)
# Week 1 - R Program - Wei Lu
# load Data Set, (not necessary since it is already loaded)
data(iris)
# Step 1: Describe the Data
# print the structure of the data (str)
str(iris)
# print summary of the data
summary(iris)
# print the first six records
head(iris)
# Step 2: Box-Whisker Plots
# Plot a box plot of Sepal.Length split by Species
boxplot(Sepal.Length ~ Species,
data = iris,
main = "Wei Lu",
col = c("blue", "red", "green"),
notch = TRUE,
xlab = "Species",
ylab = "Sepal Length"
)
# Step 3: Histograms
# Plot a histogram of Sepal.Length
hist(iris$Sepal.Length,
breaks = 18,
col = "green", # set background color
border = "#eb78e3", # set line color
main = "Wei Lu",
xlab = "Sepal Length",
probability = TRUE
)
# Superimpose a density line
lines(density(iris$Sepal.Length), col = "red", lwd = 4)
# Step 4: Scatter Plots
# Sepal.Length vs Sepal.Width colored by Species
palette(c("blue", "red", "green")) # set palette for scatter, or it's default color
plot(iris$Sepal.Length, iris$Sepal.Width,
col = iris$Species,
pch = 18,
main = "Wei Lu",
xlab = "Sepal Length",
ylab = "Sepal Width"
)
# set legend
legend("topleft", legend = levels(iris$Species), col = 1:3, pch = 18, title = "Species")
# Step 5: Simple Math Calculations
# Sepal.Length
mean_value <- mean(iris$Sepal.Length)
cat("Mean:", mean_value, "\n")
median_value <- median(iris$Sepal.Length)
cat("Median:", median_value, "\n")
min_value <- min(iris$Sepal.Length)
cat("Min:", min_value, "\n")
max_value <- max(iris$Sepal.Length)
cat("Max:", max_value, "\n")
sd_value <- sd(iris$Sepal.Length)
cat("Standard Deviation:", sd_value, "\n")
# Calculate the Median for the numeric for each group member.
median_species <- aggregate(Sepal.Length ~ Species, data = iris, FUN = median)
# Step 5: Simple Math Calculations
# Sepal.Length
mean_value <- mean(iris$Sepal.Length)
cat("Mean:", mean_value, "\n")
median_value <- median(iris$Sepal.Length)
cat("Median:", median_value, "\n")
min_value <- min(iris$Sepal.Length)
cat("Min:", min_value, "\n")
max_value <- max(iris$Sepal.Length)
cat("Max:", max_value, "\n")
sd_value <- sd(iris$Sepal.Length)
cat("Standard Deviation:", sd_value, "\n")
# Calculate the Median for the numeric for each group member.
median_species <- aggregate(Sepal.Length ~ Species, data = iris, FUN = median)
mean_value <- mean(iris$Sepal.Length)
cat("Mean:", mean_value, "\n")
median_value <- median(iris$Sepal.Length)
cat("Median:", median_value, "\n")
min_value <- min(iris$Sepal.Length)
cat("Min:", min_value, "\n")
max_value <- max(iris$Sepal.Length)
cat("Max:", max_value, "\n")
sd_value <- sd(iris$Sepal.Length)
cat("Standard Deviation:", sd_value, "\n")
# Calculate the Median for the numeric for each group member.
median_species <- aggregate(Sepal.Length ~ Species, data = iris, FUN = median)
mean_value <- mean(iris$Sepal.Length)
cat("Mean:", mean_value, "\n")
median_value <- median(iris$Sepal.Length)
cat("Median:", median_value, "\n")
min_value <- min(iris$Sepal.Length)
cat("Min:", min_value, "\n")
max_value <- max(iris$Sepal.Length)
cat("Max:", max_value, "\n")
sd_value <- sd(iris$Sepal.Length)
cat("Standard Deviation:", sd_value, "\n")
# Calculate the Median for the numeric for each group member.
median_species <- aggregate(Sepal.Length ~ Species, data = iris, FUN = median)
median_species <- aggregate(Sepal.Length ~ Species, data = iris, FUN = median)
# Step 5: 分组计算中位数（修复后）
median_species <- aggregate(
Sepal.Length ~ Species,
data = iris,
FUN = median  # 直接传递函数，避免变量覆盖
)
# Calculate the Median for the numeric for each group member.
median_species <- aggregate(Sepal.Length ~ Species, data = iris, FUN = median)
# Step 5: Simple Math Calculations
# Sepal.Length
mean_value <- mean(iris$Sepal.Length)
cat("Mean:", mean_value, "\n")
median_value <- median(iris$Sepal.Length)
cat("Median:", median_value, "\n")
min_value <- min(iris$Sepal.Length)
cat("Min:", min_value, "\n")
max_value <- max(iris$Sepal.Length)
cat("Max:", max_value, "\n")
sd_value <- sd(iris$Sepal.Length)
cat("Standard Deviation:", sd_value, "\n")
# Calculate the Median for the numeric for each group member.
median_species <- aggregate(Sepal.Length ~ Species, data = iris, FUN = median)
mean_value <- mean(iris$Sepal.Length)
cat("Mean:", mean_value, "\n")
median_value <- median(iris$Sepal.Length)
cat("Median:", median_value, "\n")
min_value <- min(iris$Sepal.Length)
cat("Min:", min_value, "\n")
max_value <- max(iris$Sepal.Length)
cat("Max:", max_value, "\n")
sd_value <- sd(iris$Sepal.Length)
cat("Standard Deviation:", sd_value, "\n")
# Calculate the Median for the numeric for each group member.
median_species <- aggregate(Sepal.Length ~ Species, data = iris, FUN = median)
mean_value <- mean(iris$Sepal.Length)
cat("Mean:", mean_value, "\n")
median_value <- median(iris$Sepal.Length)
cat("Median:", median_value, "\n")
min_value <- min(iris$Sepal.Length)
cat("Min:", min_value, "\n")
max_value <- max(iris$Sepal.Length)
cat("Max:", max_value, "\n")
sd_value <- sd(iris$Sepal.Length)
cat("Standard Deviation:", sd_value, "\n")
# Calculate the Median for the numeric for each group member.
median_species <- aggregate(Sepal.Length ~ Species, data = iris, FUN = median)
sorted_median <- median_species[order(-median_species$Sepal.Length), ]
print(sorted_median)
load("~/Documents/study/big data/Wei Lu - Week 1 - R Program.r")
# Step 5: Simple Math Calculations
# Sepal.Length
mean_value <- mean(iris$Sepal.Length)
data(iris)
iris
install.packages("tidyverse")
library(tidyverse)
data()
BOD
?BOD
ggplot(data = BOD, mapping = aes(x = Time, y = demand)) +
geom_point(size = 5) +
geom_line(color = "red")
?BOD
data()
BOD
?BOD
?BOD
library(tidyverse)
data()
BOD
?BOD
ggplot(data = BOD, mapping = aes(x = Time, y = demand)) +
geom_point(size = 5) +
geom_line(color = "red")
ggplot(BOD, aes(Time, demand)) +
gem_point(size = 3) +
geom_line(color = "red")
ggplot(BOD, aes(Time, demand)) +
gem_point(size = 3) +
geom_line(color = "red"))
ggplot(BOD, aes(Time, demand) +
gem_point(size = 3) +
geom_line(color = "red"))
ggplot(BOD, aes(Time, demand)) +
gem_point(size = 3) +
geom_line(color = "red")
ggplot(BOD, aes(Time, demand)) +
geom_point(size = 3) +
geom_line(color = "red")
data()
view(co2)
co2 %>%
ggplot(aes(conc, uptake, color = Treatment())
+ geom_point(size = 3, alpha = 0.5) +
gem_smooth(method=1m, se=F) +
co2 %>%
ggplot(aes(conc, uptake, colour = Treatment)) +
+ geom_point(size = 3, alpha = 0.5) +
gem_smooth(method=1m, se=F) +
co2 %>%
ggplot(aes(conc, uptake, colour = Treatment)) +
geom_point(size = 3, alpha = 0.5) +
gem_smooth(method=1m, se=F) +
co2 %>%
ggplot(aes(conc, uptake, colour = Treatment)) +
geom_point(size = 3, alpha = 0.5) +
gem_smooth(method = "1m", se = F) +
facet_wrap(~Type) +
labs(title = "Concentration of co2") +
theme_bw()
co2 %>%
ggplot(aes(conc, uptake, colour = Treatment)) +
geom_point(size = 3, alpha = 0.5) +
geom_smooth(method = "1m", se = F) +
facet_wrap(~Type) +
labs(title = "Concentration of co2") +
theme_bw()
co2 %>%
ggplot(aes(conc, uptake, colour = Treatment)) +
geom_point(size = 3, alpha = 0.5) +
geom_smooth(method = "1m", se = FALSE) +
facet_wrap(~Type) +
labs(title = "Concentration of co2") +
theme_bw()
CO2 %>%
ggplot(aes(conc, uptake, colour = Treatment)) +
geom_point(size = 3, alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +  # 修正了gem_smooth拼写错误和参数
facet_wrap(~Type) +
labs(title = "CO2 Concentration by Plant Type and Treatment") +  # 更清晰的标题
theme_bw()
co2 %>%
ggplot(aes(conc, uptake, colour = Treatment)) +
geom_point(size = 3, alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~Type) +
labs(title = "Concentration of co2") +
theme_bw()
CO2 %>%
ggplot(aes(conc, uptake, colour = Treatment)) +
geom_point(size = 3, alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~Type) +
labs(title = "Concentration of co2") +
theme_bw()
view(CO2)
view(CO2)
data()
view(CO2)
CO2 %>%
ggplot(aes(conc, uptake, colour = Treatment)) +
geom_point(size = 3, alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~Type) +
labs(title = "Concentration of co2") +
theme_bw()
CO2 %>%
ggplot(aes(Treatment, uptake)) +
geom_boxplot() +
geopoint(
alpha = 0.5,
aes(size = conc, colour = Plant)
) +
facet_wrap(~Type) +
coord_flip() +
theme_bw() +
labs(
title = "Chilled vs Non-chilled",
)
CO2 %>%
ggplot(aes(Treatment, uptake)) +
geom_boxplot() +
geom_point()(
alpha = 0.5,
aes(size = conc, colour = Plant)
) +
facet_wrap(~Type) +
coord_flip() +
theme_bw() +
labs(
title = "Chilled vs Non-chilled",
)
CO2 %>%
ggplot(aes(Treatment, uptake)) +
geom_boxplot() +
geom_point(
alpha = 0.5,
aes(size = conc, colour = Plant)
) +
facet_wrap(~Type) +
coord_flip() +
theme_bw() +
labs(
title = "Chilled vs Non-chilled",
)
CO2 %>%
ggplot(aes(Treatment, uptake)) +
geom_boxplot() +
geom_point(
alpha = 0.5,
aes(size = conc, colour = Plant)
) +
facet_wrap(~Type) +
coord_flip() +
theme_bw() +
labs(
title = "Chilled vs Non-chilled",
)
View(mpg)
¬mpg %>%
mpg %>%
filter(cty < 25) %>%
ggplot(aes(displ, cty)) +
geom_point(aes(colour = drv), size = trans, alpha = 0.5) +
geom_smooth(method = "lm") +
facet_wrap(~year, nrow = 1) +
labs(title = "Displacement vs Highway MPG") +
theme_bw() +
theme(legend.position = "none") +
labs(
x = "Engine Size",
y = "MPG in the City ",
title = "Fuel efficiency",
) +
theme_bw()
mpg %>%
filter(cty < 25) %>%
ggplot(aes(displ, cty)) +
geom_point(aes(colour = drv, size = trans), alpha = 0.5) +
geom_smooth(method = "lm") +
facet_wrap(~year, nrow = 1) +
labs(title = "Displacement vs Highway MPG") +
theme_bw() +
theme(legend.position = "none") +
labs(
x = "Engine Size",
y = "MPG in the City ",
title = "Fuel efficiency",
) +
theme_bw()
View(mpg)
mpg %>%
filter(cty < 25) %>%
ggplot(aes(displ, cty)) +
geom_point(aes(colour = drv, size = trans), alpha = 0.5) +
geom_smooth(method = "lm") +
facet_wrap(~year, nrow = 1) +
labs(title = "Displacement vs Highway MPG") +
theme_bw() +
theme(legend.position = "none") +
labs(
x = "Engine Size",
y = "MPG in the City ",
title = "Fuel efficiency",
) +
theme_bw()
¬data()
data()
BOD
?BOD
ggplot(data = BOD, mapping = aes(x = Time, y = demand)) +
geom_point(size = 5) +
geom_line(color = "red")
ggplot(BOD, aes(Time, demand)) +
geom_point(size = 3) +
geom_line(color = "red")
data()
view(CO2)
CO2 %>%
ggplot(aes(conc, uptake, colour = Treatment)) +
geom_point(size = 3, alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~Type) +
labs(title = "Concentration of co2") +
theme_bw()
CO2 %>%
ggplot(aes(Treatment, uptake)) +
geom_boxplot() +
geom_point(
alpha = 0.5,
aes(size = conc, colour = Plant)
) +
facet_wrap(~Type) +
coord_flip() +
theme_bw() +
labs(
title = "Chilled vs Non-chilled",
)
View(mpg)
mpg %>%
filter(cty < 25) %>%
ggplot(aes(displ, cty)) +
geom_point(aes(colour = drv, size = trans), alpha = 0.5) +
geom_smooth(method = "lm") +
facet_wrap(~year, nrow = 1) +
labs(title = "Displacement vs Highway MPG") +
theme_bw() +
theme(legend.position = "none") +
labs(
x = "Engine Size",
y = "MPG in the City ",
title = "Fuel efficiency",
) +
theme_bw()
# Load necessary libraries
library(tidyverse)
library(factoextra)
library(FlexClust)
install.packages('factoextra')
install.packages('FlexClust')
# Load necessary libraries
library(tidyverse)
library(factoextra)
library(FlexClust)
PATH <- "/Users/gaoshaoyun/Documents/study/big data/r-ds/HMEQ_Scrubbed"
FILE_NAME <- "HMEQ_Scrubbed.csv"
INFILE <- paste(PATH, FILE_NAME, sep = "/")
setwd(PATH)
# ! Step 1: Load and prepare the data
hmeq <- read.csv(FILE_NAME)
hmeq <- read.csv(FILE_NAME)
str(hmeq)
summary(hmeq)
head(hmeq)
continuous_vars <- hmeq %>%
select(LOAN, VALUE, MORTDUE, YOJ)
# Load necessary libraries
library(tidyverse)
library(factoextra)
library(FlexClust)
